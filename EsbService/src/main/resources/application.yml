service-order-customer:
  url: ${SERVICE_ORDER_CUSTOMER_URL:http://localhost:8089}
service-models:
  url: ${SERVICE_MODELS_URL:http://localhost:8088}
esb-service:
  url: ${SERVICE_MODELS_URL:http://localhost:8090}
server:
  port: 8090
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false
vpn:
  kafka:
    bootstrap-servers: localhost:9092
    product:
      batchConcurrency: 3
      group: group
spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  batch:
    jdbc:
      initialize-schema: always
  sql:
    init:
      mode: always # Spring Boot >=v2.5.0
      platform: h2 # Spring Boot <v2.5.0
#    initialization-mode: always # Spring Boot <v2.5.0
#    platform: h2 # Spring Boot <v2.5.0
  jpa:
    hibernate:
      ddl-auto: none # When you launch the application for the first time - switch "none" at "create"
    show-sql: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
#    open-in-view: false
#    generate-ddl: true
    defer-datasource-initialization: false
  spring:
    h2:
      console:
        enabled: true
        path: /h2-console
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic
client:
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    #Password must mach value in docker-compose.yml when running locally
    password: ${REDIS_PASSWORD:localRedisPassword1}
    #No SSL when running locally
    useSSL: ${REDIS_USE_SSL:false}
    cluster:
      enabled: ${REDIS_USE_CLUSTERING:false}
      shardCount: ${REDIS_CLUSTER_SHARD_COUNT:6}
